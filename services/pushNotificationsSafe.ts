// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç push –≤ Expo Go

import { Platform } from 'react-native';
import Constants from 'expo-constants';
import * as Device from 'expo-device';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –≤ Expo Go
const isExpoGo = Constants.appOwnership === 'expo' || !Constants.executionEnvironment?.startsWith('standalone');

class SafePushNotificationService {
  
  static async registerForPushNotifications() {
    if (isExpoGo) {
      console.log('üìµ Push notifications disabled in Expo Go. Using fallback.');
      return null;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ dev build, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–µ push
    const { PushNotificationService } = await import('./pushNotifications');
    return PushNotificationService.registerForPushNotifications();
  }
  
  static async saveGuestPushToken(guestId: string) {
    if (isExpoGo) {
      console.log('üìµ Mock token saved for testing in Expo Go');
      return;
    }
    
    const { PushNotificationService } = await import('./pushNotifications');
    return PushNotificationService.saveGuestPushToken(guestId);
  }
  
  static subscribeToMessages(guestId: string, onMessage: (message: any) => void) {
    if (isExpoGo) {
      console.log('üìµ Using polling for messages in Expo Go');
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
      return () => {}; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
    }
    
    return import('./pushNotifications').then(({ PushNotificationService }) => {
      return PushNotificationService.subscribeToMessages(guestId, onMessage);
    });
  }
  
  static async handleIncomingNotification(notification: any) {
    if (isExpoGo) return;
    
    const { PushNotificationService } = await import('./pushNotifications');
    return PushNotificationService.handleIncomingNotification(notification);
  }
  
  static async getLastNotificationResponse() {
    if (isExpoGo) return null;
    
    const { PushNotificationService } = await import('./pushNotifications');
    return PushNotificationService.getLastNotificationResponse();
  }
  
  static async clearAllNotifications() {
    if (isExpoGo) return;
    
    const { PushNotificationService } = await import('./pushNotifications');
    return PushNotificationService.clearAllNotifications();
  }
  
  static async setBadgeCount(count: number) {
    if (isExpoGo) return;
    
    const { PushNotificationService } = await import('./pushNotifications');
    return PushNotificationService.setBadgeCount(count);
  }
  
  static async scheduleCheckInReminder(checkInDate: Date, roomNumber: string) {
    if (isExpoGo) {
      console.log('üìµ Check-in reminder scheduled (mock)');
      return;
    }
    
    const { PushNotificationService } = await import('./pushNotifications');
    return PushNotificationService.scheduleCheckInReminder(checkInDate, roomNumber);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export enum NotificationType {
  BOOKING_CONFIRMED = 'booking_confirmed',
  CHECK_IN_REMINDER = 'check_in_reminder', 
  ROOM_READY = 'room_ready',
  NEW_MESSAGE = 'new_message',
  ORDER_READY = 'order_ready',
  SERVICE_CONFIRMED = 'service_confirmed',
  COMPLAINT_RESPONSE = 'complaint_response',
}

export const PushNotificationService = SafePushNotificationService;
export default SafePushNotificationService;