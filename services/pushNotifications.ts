import * as Device from 'expo-device';
import Constants from 'expo-constants';
import { Platform } from 'react-native';
import { supabase } from '@/lib/supabase';
import { RealtimeChannel } from '@supabase/supabase-js';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º expo-notifications, –Ω–æ –ù–ï –≤—ã–∑—ã–≤–∞–µ–º setNotificationHandler –≥–ª–æ–±–∞–ª—å–Ω–æ
let Notifications: any;
try {
  Notifications = require('expo-notifications');
} catch (error) {
  console.log('üìµ expo-notifications not available');
}

// –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≥–æ—Å—Ç–µ–π
export enum NotificationType {
  BOOKING_CONFIRMED = 'booking_confirmed',
  CHECK_IN_REMINDER = 'check_in_reminder',
  ROOM_READY = 'room_ready',
  NEW_MESSAGE = 'new_message',
  ORDER_READY = 'order_ready',
  SERVICE_CONFIRMED = 'service_confirmed',
  COMPLAINT_RESPONSE = 'complaint_response',
}

export class PushNotificationService {
  private static realtimeChannel: RealtimeChannel | null = null;
  private static notificationCache = new Map<string, number>();
  private static notificationHandlerSet = false;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
  private static initializeNotificationHandler() {
    if (!this.notificationHandlerSet && Notifications && Notifications.setNotificationHandler) {
      try {
        Notifications.setNotificationHandler({
          handleNotification: async () => ({
            shouldShowAlert: true,
            shouldPlaySound: true,
            shouldSetBadge: true,
          }),
        });
        this.notificationHandlerSet = true;
      } catch (error) {
        console.log('Cannot set notification handler:', error);
      }
    }
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  static async registerForPushNotifications() {
    let token;

    if (!Device.isDevice) {
      console.log('Push notifications —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö');
      return;
    }

    if (!Notifications) {
      console.log('üìµ Notifications module not available');
      return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ
    this.initializeNotificationHandler();

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    console.log('üì± Current permission status:', existingStatus);
    
    let finalStatus = existingStatus;
    
    if (existingStatus !== 'granted') {
      console.log('üîî Requesting push notification permissions...');
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
      console.log('üì± New permission status:', finalStatus);
    }
    
    if (finalStatus !== 'granted') {
      console.log('‚ùå Push notifications permission denied by user');
      alert('–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.');
      return;
    }
    
    console.log('‚úÖ Push notifications permission granted');

    // –ü–æ–ª—É—á–∞–µ–º Expo Push Token
    try {
      const projectId = Constants.expoConfig?.extra?.eas?.projectId ?? Constants.easConfig?.projectId;
      token = (await Notifications.getExpoPushTokenAsync({ projectId })).data;
      console.log('Push token:', token);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è push token:', error);
      return;
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è Android
    if (Platform.OS === 'android') {
      await Notifications.setNotificationChannelAsync('default', {
        name: 'default',
        importance: Notifications.AndroidImportance.MAX,
        vibrationPattern: [0, 250, 250, 250],
        lightColor: '#FF231F7C',
      });

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
      await Notifications.setNotificationChannelAsync('messages', {
        name: 'Messages',
        importance: Notifications.AndroidImportance.HIGH,
        vibrationPattern: [0, 250, 250, 250],
        sound: 'default',
      });
    }

    return token;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≥–æ—Å—Ç—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  static async saveGuestPushToken(guestId: string) {
    const token = await this.registerForPushNotifications();
    
    if (!token) return;

    try {
      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      await supabase
        .from('push_tokens')
        .delete()
        .eq('user_id', guestId)
        .eq('platform', Platform.OS);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      const { error } = await supabase
        .from('push_tokens')
        .insert({
          user_id: guestId,
          token: token,
          user_type: 'guest',
          platform: Platform.OS,
          created_at: new Date().toISOString(),
          last_active: new Date().toISOString()
        });
      
      if (error) throw error;
      console.log('Push token –≥–æ—Å—Ç—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:', token);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è push token:', error);
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ realtime —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≥–æ—Å—Ç—è
  static async subscribeToRealtimeEvents(guestId: string) {
    try {
      // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
      if (this.realtimeChannel) {
        await supabase.removeChannel(this.realtimeChannel);
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è realtime
      this.realtimeChannel = supabase
        .channel(`guest-${guestId}-${Date.now()}`)
        .on('postgres_changes', {
          event: 'INSERT',
          schema: 'public',
          table: 'messages',
          filter: `conversation_id=in.(SELECT id FROM conversations WHERE guest_id='${guestId}')`
        }, async (payload) => {
          console.log('üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', payload);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ—Ç–µ–ª—è (staff)
          if (payload.new.sender_type === 'staff') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            const messageId = payload.new.id;
            const now = Date.now();
            const lastSent = this.notificationCache.get(messageId);
            
            if (!lastSent || now - lastSent > 5000) { // 5 —Å–µ–∫—É–Ω–¥ –¥–µ–±–∞—É–Ω—Å
              this.notificationCache.set(messageId, now);
              
              // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
              const { data: conversation } = await supabase
                .from('conversations')
                .select('*')
                .eq('id', payload.new.conversation_id)
                .single();
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
              await this.sendMessageNotification({
                messageId: payload.new.id,
                conversationId: payload.new.conversation_id,
                message: payload.new.content,
                senderName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–µ–ª—è',
                roomNumber: conversation?.room_number
              });
            }
          }
        })
        .on('postgres_changes', {
          event: 'UPDATE',
          schema: 'public',
          table: 'bookings',
          filter: `guest_id=eq.${guestId}`
        }, async (payload) => {
          console.log('üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', payload);
          
          // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
          if (payload.new.status === 'confirmed' && payload.old.status !== 'confirmed') {
            await this.sendBookingConfirmationNotification({
              bookingId: payload.new.id,
              roomNumber: payload.new.room_number,
              checkIn: payload.new.check_in,
              checkOut: payload.new.check_out,
              totalPrice: payload.new.total_price
            });
          }
        })
        .subscribe((status) => {
          console.log('üì° Realtime subscription status:', status);
        });

      return () => {
        // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø–∏—Å–∫–∏
        if (this.realtimeChannel) {
          supabase.removeChannel(this.realtimeChannel);
        }
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ realtime:', error);
      return () => {};
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
  static async sendMessageNotification(data: {
    messageId: string;
    conversationId: string;
    message: string;
    senderName: string;
    roomNumber?: string;
  }) {
    if (!Notifications) {
      console.log('üìµ Cannot send notification - module not available');
      return;
    }

    try {
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è iOS
      await this.registerMessageActions();

      const title = `üí¨ ${data.senderName}`;
      const subtitle = data.roomNumber ? `–ù–æ–º–µ—Ä ${data.roomNumber}` : undefined;
      const body = data.message.length > 150 
        ? data.message.substring(0, 150) + '...' 
        : data.message;

      await Notifications.scheduleNotificationAsync({
        content: {
          title: title,
          subtitle: subtitle,
          body: body,
          data: {
            type: NotificationType.NEW_MESSAGE,
            conversationId: data.conversationId,
            messageId: data.messageId
          },
          categoryIdentifier: 'MESSAGE_NOTIFICATION',
          sound: 'default',
          badge: 1,
        },
        trigger: { seconds: 1 },
      });

      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  static async sendBookingConfirmationNotification(data: {
    bookingId: string;
    roomNumber: string;
    checkIn: string;
    checkOut: string;
    totalPrice: number;
  }) {
    try {
      await Notifications.scheduleNotificationAsync({
        content: {
          title: '‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!',
          body: `–ù–æ–º–µ—Ä ${data.roomNumber} ‚Ä¢ ${data.checkIn} - ${data.checkOut}\n–°—É–º–º–∞: ${data.totalPrice} GBP`,
          data: {
            type: NotificationType.BOOKING_CONFIRMED,
            bookingId: data.bookingId
          },
          sound: 'default',
          badge: 1,
        },
        trigger: { seconds: 1 },
      });

      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π (iOS)
  private static async registerMessageActions() {
    try {
      await Notifications.setNotificationCategoryAsync('MESSAGE_NOTIFICATION', [
        {
          identifier: 'REPLY',
          buttonTitle: '–û—Ç–≤–µ—Ç–∏—Ç—å',
          options: {
            opensAppToForeground: false,
            isAuthenticationRequired: false,
          },
          textInput: {
            submitButtonTitle: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
            placeholder: '–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç...'
          }
        },
        {
          identifier: 'VIEW',
          buttonTitle: '–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç',
          options: {
            opensAppToForeground: true,
            isAuthenticationRequired: false,
          }
        }
      ]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  static async handleNotificationResponse(response: Notifications.NotificationResponse) {
    const { actionIdentifier, notification } = response;
    const data = notification.request.content.data;

    console.log('üì± –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è:', actionIdentifier);

    switch (actionIdentifier) {
      case 'REPLY':
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        const replyText = (response as any).userText;
        if (replyText && data?.conversationId) {
          await this.sendQuickReply(data.conversationId, replyText);
        }
        break;

      case 'VIEW':
        // –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞:', data?.conversationId);
        break;

      default:
        // –û–±—ã—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–æ:', data?.type);
        break;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  private static async sendQuickReply(conversationId: string, replyText: string) {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        console.error('–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      const { error } = await supabase
        .from('messages')
        .insert({
          conversation_id: conversationId,
          sender_id: user.id,
          sender_type: 'guest',
          content: replyText,
          is_read: false,
          created_at: new Date().toISOString()
        });

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error);
      } else {
        console.log('‚úÖ –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await Notifications.scheduleNotificationAsync({
          content: {
            title: '‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
            body: replyText.length > 50 ? replyText.substring(0, 50) + '...' : replyText,
            sound: null,
          },
          trigger: { seconds: 1 },
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ sendQuickReply:', error);
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
  static subscribeToMessages(guestId: string, onMessage: (message: any) => void) {
    if (!Notifications) {
      console.log('üìµ Notifications not available, only realtime subscription');
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ realtime —Å–æ–±—ã—Ç–∏—è
      this.subscribeToRealtimeEvents(guestId);
      return () => {}; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
    }

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ realtime —Å–æ–±—ã—Ç–∏—è
    const unsubscribeRealtime = this.subscribeToRealtimeEvents(guestId);
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notificationListener = Notifications.addNotificationReceivedListener(notification => {
      const data = notification.request.content.data;
      
      if (data?.type === NotificationType.NEW_MESSAGE) {
        onMessage(data);
      }
    });

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –Ω–∏—Ö)
    const responseListener = Notifications.addNotificationResponseReceivedListener(response => {
      const data = response.notification.request.content.data;
      
      if (data?.type === NotificationType.NEW_MESSAGE) {
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —á–∞—Ç—É
        onMessage(data);
      }
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
    return () => {
      Notifications.removeNotificationSubscription(notificationListener);
      Notifications.removeNotificationSubscription(responseListener);
    };
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  static async handleIncomingNotification(notification: Notifications.Notification) {
    const { title, body, data } = notification.request.content;
    
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', { title, body, data });
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    switch (data?.type) {
      case NotificationType.NEW_MESSAGE:
        // –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        break;
      case NotificationType.BOOKING_CONFIRMED:
        // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        break;
      case NotificationType.ROOM_READY:
        // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞
        break;
      default:
        break;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
  static async getLastNotificationResponse() {
    const response = await Notifications.getLastNotificationResponseAsync();
    
    if (response) {
      const data = response.notification.request.content.data;
      return data;
    }
    
    return null;
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  static async clearAllNotifications() {
    await Notifications.dismissAllNotificationsAsync();
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–∞ –∏–∫–æ–Ω–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  static async setBadgeCount(count: number) {
    await Notifications.setBadgeCountAsync(count);
  }

  // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞—Å–µ–ª–µ–Ω–∏–∏)
  static async scheduleCheckInReminder(checkInDate: Date, roomNumber: string) {
    // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –∑–∞—Å–µ–ª–µ–Ω–∏—è
    const reminderDate = new Date(checkInDate);
    reminderDate.setDate(reminderDate.getDate() - 1);
    reminderDate.setHours(10, 0, 0, 0); // 10:00 —É—Ç—Ä–∞

    if (reminderDate > new Date()) {
      await Notifications.scheduleNotificationAsync({
        content: {
          title: 'üè® –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞—Å–µ–ª–µ–Ω–∏–∏',
          body: `–ó–∞–≤—Ç—Ä–∞ –≤–∞—à–µ –∑–∞—Å–µ–ª–µ–Ω–∏–µ –≤ –Ω–æ–º–µ—Ä ${roomNumber}. –ñ–¥–µ–º –≤–∞—Å!`,
          data: { type: NotificationType.CHECK_IN_REMINDER, roomNumber },
        },
        trigger: reminderDate,
      });
    }
  }

  // –û—Ç–º–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  static async cancelScheduledNotifications() {
    await Notifications.cancelAllScheduledNotificationsAsync();
  }
}

export default PushNotificationService;