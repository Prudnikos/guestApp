// Mock –≤–µ—Ä—Å–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ dev build
// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Alert –≤–º–µ—Å—Ç–æ push

import { Alert } from 'react-native';
import { supabase } from '@/lib/supabase';

export enum NotificationType {
  BOOKING_CONFIRMED = 'booking_confirmed',
  CHECK_IN_REMINDER = 'check_in_reminder',
  ROOM_READY = 'room_ready',
  NEW_MESSAGE = 'new_message',
  ORDER_READY = 'order_ready',
  SERVICE_CONFIRMED = 'service_confirmed',
  COMPLAINT_RESPONSE = 'complaint_response',
}

export class PushNotificationService {
  private static mockToken = `MockPushToken_${Date.now()}`;
  
  // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è push
  static async registerForPushNotifications() {
    console.log('üì± MOCK: Push registration (using alerts instead)');
    return this.mockToken;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≥–æ—Å—Ç—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  static async saveGuestPushToken(guestId: string) {
    console.log('üíæ MOCK: Saving push token for guest:', guestId);
    
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º mock —Ç–æ–∫–µ–Ω –≤ –ë–î –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      await supabase
        .from('push_tokens')
        .delete()
        .eq('user_id', guestId)
        .eq('platform', 'mock');
      
      const { error } = await supabase
        .from('push_tokens')
        .insert({
          user_id: guestId,
          token: this.mockToken,
          user_type: 'guest',
          platform: 'mock',
          created_at: new Date().toISOString(),
          last_active: new Date().toISOString()
        });
      
      if (error) throw error;
      console.log('‚úÖ MOCK: Token saved');
    } catch (error) {
      console.error('Error saving mock token:', error);
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º realtime
  static subscribeToMessages(guestId: string, onMessage: (message: any) => void) {
    console.log('üì® MOCK: Subscribing to messages for guest:', guestId);
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ realtime —Å–æ–±—ã—Ç–∏—è
    const channel = supabase
      .channel(`guest-messages-${guestId}`)
      .on('postgres_changes', {
        event: 'INSERT',
        schema: 'public',
        table: 'messages',
        filter: `conversation_id=in.(SELECT id FROM conversations WHERE guest_id='${guestId}')`
      }, (payload) => {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Alert –≤–º–µ—Å—Ç–æ push
        if (payload.new.sender_type === 'staff') {
          Alert.alert(
            'üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ—Ç–µ–ª—è',
            payload.new.content.substring(0, 100),
            [
              { text: '–ó–∞–∫—Ä—ã—Ç—å', style: 'cancel' },
              { text: '–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç', onPress: () => onMessage(payload.new) }
            ]
          );
        }
      })
      .subscribe();

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
    return () => {
      supabase.removeChannel(channel);
    };
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (mock)
  static async handleIncomingNotification(notification: any) {
    console.log('üì± MOCK: Handling notification:', notification);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  static async getLastNotificationResponse() {
    return null;
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  static async clearAllNotifications() {
    console.log('üßπ MOCK: Clearing notifications');
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–∞ –∏–∫–æ–Ω–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  static async setBadgeCount(count: number) {
    console.log('üî¢ MOCK: Badge count:', count);
  }

  // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (mock —á–µ—Ä–µ–∑ setTimeout)
  static async scheduleCheckInReminder(checkInDate: Date, roomNumber: string) {
    const reminderDate = new Date(checkInDate);
    reminderDate.setDate(reminderDate.getDate() - 1);
    
    const msUntilReminder = reminderDate.getTime() - Date.now();
    
    if (msUntilReminder > 0) {
      setTimeout(() => {
        Alert.alert(
          'üè® –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞—Å–µ–ª–µ–Ω–∏–∏',
          `–ó–∞–≤—Ç—Ä–∞ –≤–∞—à–µ –∑–∞—Å–µ–ª–µ–Ω–∏–µ –≤ –Ω–æ–º–µ—Ä ${roomNumber}. –ñ–¥–µ–º –≤–∞—Å!`,
          [{ text: 'OK' }]
        );
      }, msUntilReminder);
      
      console.log('‚è∞ MOCK: Check-in reminder scheduled');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  static async showTestNotification(type: string, message: string) {
    Alert.alert(
      `üîî ${type}`,
      message,
      [{ text: 'OK' }]
    );
  }
}

export default PushNotificationService;